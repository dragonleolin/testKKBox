{"version":3,"sources":["pages/PlayLists.js","pages/Home.js","pages/ThemeList.js","pages/HomeMain.js","component/Nav.js","App.js","serviceWorker.js","index.js"],"names":["PlayLists","props","getInitData","a","async","token","charId","hitId","console","log","axios","get","headers","Authorization","then","res","data","tracks","name","YTName","allSong","setState","title","getYTData","state","playYTData","items","id","videoId","YTData","catch","err","this","createId","snippet","className","src","style","minHeight","weight","description","margin","overflowY","height","map","cursor","onClick","key","album","images","url","width","artist","React","Component","Home","getNewHitPlayLists","undefined","hitPlayList","searchData","textAlign","to","fontSize","path","component","ThemeList","Nav","getToken","post","qs","stringify","grant_type","client_id","client_secret","access_token","href","window","location","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","exact","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.643b5fdc.chunk.js","sourcesContent":["import React from 'react'\r\nimport axios from \"axios\";\r\nimport '../style.scss';\r\n\r\nclass PlayLists extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state ={\r\n            title: '',\r\n            YTName: '',\r\n            playYTData: '',\r\n            allSong:[],\r\n            YTData: []\r\n        }\r\n\r\n    }\r\n    componentDidMount(){\r\n            this.getInitData()\r\n    }\r\n\r\n    getInitData = async() => {\r\n        let token = this.props.token\r\n        let charId = this.props.hitId\r\n        console.log(12, token);\r\n        await axios.get(`https://api.kkbox.com/v1.1/charts/${charId}?territory=TW`,\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ` + token\r\n              }\r\n            }\r\n          )\r\n          .then( async(res) => {\r\n            console.log(13, res.data.tracks.data[0].name);\r\n            // let str = res.data.tracks.data[0].name\r\n            // let strArr = str.split(' ')\r\n            let YTName = res.data.tracks.data[0].name\r\n            let allSong = res.data.tracks.data\r\n            await this.setState({\r\n              title: res.data.title,\r\n              allSong,\r\n              YTName\r\n            })\r\n            await this.getYTData()\r\n          })\r\n    }\r\n\r\n    getYTData = () => {\r\n        let name= this.state.YTName\r\n        console.log(4, name);\r\n        // youtubeKeyMain: AIzaSyCqiOvXgeO9u7AbLly294jjoZwZ3PFVKDs\r\n        // youtubeKey: AIzaSyDqvzY_cP4_ZI5lKpnWrDWZZu6Gm2PzK74\r\n        axios.get(`https://www.googleapis.com/youtube/v3/search?key=AIzaSyCqiOvXgeO9u7AbLly294jjoZwZ3PFVKDs&part=snippet&type=video&q=${name}`)\r\n          .then( res => {\r\n            console.log(5, res.data);\r\n            let playYTData = res.data.items[0].id.videoId\r\n            let YTData = res.data\r\n            this.setState({playYTData, YTData})\r\n          })\r\n          .catch(err => {\r\n              console.log(err);\r\n              \r\n          })\r\n      }\r\n\r\n\r\n\r\n    render(){\r\n        let playYTData = this.state.playYTData\r\n        let allSong = this.state.allSong\r\n        let YTData = this.state.YTData\r\n        let createId = 0\r\n        console.log(123, playYTData);\r\n        console.log(124, YTData.items && YTData.items[0].snippet.title);\r\n       \r\n        return (\r\n            <>\r\n                <div className=\"playLists container-fluid\">\r\n                    <div className=\"row\">\r\n                        <div className=\"playContent col-md-8 col-12 d-flex justify-content-start flex-column\">\r\n                            <iframe src={`https://www.youtube.com/embed/${playYTData}`}\r\n                                style={{minHeight: '600px',weight: '100vw'}}\r\n                            />\r\n                            <div className=\"playText\">\r\n                                <h3>{YTData.items && YTData.items[0].snippet.title}</h3>\r\n                                <h4>{YTData.items && YTData.items[0].snippet.description}</h4>\r\n                            </div> \r\n                        </div>\r\n                        <div className=\"col-md-4 col-12 \">\r\n                            <div style={{ margin: '5px', overflowY: 'scroll', \r\n                            height: '700px'}}>\r\n                            <h2>{this.state.title}</h2>\r\n                                    {\r\n                                        allSong.map(data=>(\r\n                                            <div className=\"row\"\r\n                                                style={{ margin: '5px', cursor: 'pointer'}}\r\n                                                onClick={ async()=>{\r\n                                                    let YTName = data.name\r\n                                                    await this.setState({YTName})\r\n                                                    await this.getYTData()\r\n                                                }}\r\n                                                key={createId++}\r\n                                            >\r\n                                        <img src={data.album.images[0].url}\r\n                                        style={{width:'80px', height: '80px'}}/>\r\n                                        <div className=\"col\">\r\n                                            <h4>{data.name}</h4>\r\n                                            <h4>{data.album.artist.name}</h4>\r\n                                        </div>\r\n                                    </div>\r\n                                        ))\r\n                                    }\r\n                                    </div>      \r\n                        \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default PlayLists ","import React from 'react'\r\nimport axios from \"axios\";\r\nimport { Route, Link, Switch } from 'react-router-dom'\r\nimport PlayLists from './PlayLists'\r\nclass Home extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n          token: '',\r\n          searchData: [],\r\n          YTName: '',\r\n          playYTData: '',\r\n          hitPlayList: [],\r\n          hitId: '',\r\n        }\r\n      }\r\n      componentDidMount(){\r\n        this.getNewHitPlayLists()\r\n      }\r\n  \r\n   \r\n  \r\n  \r\n  \r\n      //  getSearch = async()=>{\r\n      //   // console.log(2, this.state.token);\r\n      //   let token =  this.state.token\r\n      //   if(token !== undefined){\r\n      //     await axios.get(\"https://api.kkbox.com/v1.1/search?q=五月天&type=artist,track&territory=TW\",\r\n      //       {\r\n      //         headers: {\r\n      //           Authorization: `Bearer ` + token\r\n      //         }\r\n      //       }\r\n      //     )\r\n      //     .then( res => {\r\n      //       // console.log(3, res.data);\r\n      //       this.setState({\r\n      //         searchData: res.data,\r\n      //         YTName: res.data.tracks.data[0].name\r\n      //       })\r\n      //     })\r\n      //   }\r\n      // }\r\n\r\n      getNewHitPlayLists = async()=>{\r\n        let token =  this.props.token\r\n        console.log(6,token);\r\n        if(token !== undefined){\r\n          await axios.get(\"https://api.kkbox.com/v1.1/new-hits-playlists?territory=TW\",\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ` + token\r\n              }\r\n            }\r\n          )\r\n          .then( res => {\r\n            // console.log(7, res.data.data[0].title);\r\n            let hitPlayList = res.data.data\r\n            this.setState({hitPlayList, token})\r\n          })\r\n          .catch(err => {\r\n            console.log(err);\r\n            \r\n        })\r\n        }\r\n      }\r\n\r\n      //youtube聯結\r\n      //https://www.youtube.com/embed/e0k-EM6zJ10\r\n  \r\n\r\n    render(){\r\n        // console.log(6, this.state.playYTData);\r\n        console.log(8, this.state.hitPlayList);\r\n        let hitPlayList = this.state.hitPlayList\r\n        let createId = 0\r\n        return(\r\n            <>\r\n              <section>\r\n              <h2  style={{textAlign: 'center', margin: '20px'}}>KKBOX OPEN API 熱門歌單</h2>\r\n                  <div className=\"row d-flex flex-row justify-content-center\">\r\n                      {hitPlayList.map(data => (\r\n                          <div className=\"col-md-3.col-6\" style={{margin: '20px'}} \r\n                            onClick={\r\n                              ()=>{\r\n                                let hitId = data.id\r\n                                this.setState({hitId})}\r\n                            }\r\n                            key={createId++}\r\n                            >\r\n                              <Link to=\"/hitList/PlayLists\"  >\r\n                                <img src={data.images[0].url} /> \r\n                                <div style={{textAlign: 'center', margin: '20px', fontSize: '18px'}}>\r\n                                    {data.title}\r\n                                </div>\r\n                              </Link>\r\n                          </div>\r\n                          ))\r\n                      } \r\n                  </div>\r\n              </section>\r\n            \r\n\r\n              <Switch>\r\n                <Route path=\"/hitList/PlayLists\" component={()=><PlayLists \r\n                hitId = {this.state.hitId }\r\n                token = {this.state.token}\r\n                />}/>\r\n              </Switch>\r\n\r\n            </>    \r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Home","import React from 'react'\r\n\r\nclass ThemeList extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n                <h1>{this.props.token}</h1>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ThemeList","import React from 'react'\r\n\r\nclass HomeMain extends React.Component{\r\n\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n                <h1>Hello1111</h1>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default HomeMain","import React from 'react'\r\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom'\r\nimport qs from \"querystring\";\r\nimport axios from \"axios\";\r\nimport Home from '../pages/Home'\r\nimport HomeMain from '../pages/HomeMain'\r\nimport ThemeList from '../pages/ThemeList'\r\n\r\nclass Nav extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n          token: '',\r\n        }\r\n      }\r\n      componentDidMount(){\r\n        this.getToken()\r\n      }\r\n\r\n      getToken  = ()=>{\r\n        axios.post(\r\n          \"/oauth2/token\",\r\n          qs.stringify({\r\n            grant_type: \"client_credentials\",\r\n            client_id: '19d225bcb7a2cadda5e9418952fed522',\r\n            client_secret: '1f8bc06e0a05e1e1a721af6c31e3d340' \r\n            }),\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n            }\r\n          }\r\n        )\r\n        .then(async res=>{\r\n          console.log(1, res.data.access_token);\r\n          let token = res.data.access_token\r\n          await this.setState({token})\r\n        })\r\n      }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            {/* <Router> */}\r\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                    <h2 className=\"navbar-brand\" href=\"test\" onClick={() => {\r\n                        window.location.href = '/'\r\n                      }} style={{cursor:'pointer'}}>MyKKBOX</h2>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav mr-auto\">\r\n                            <li className=\"nav-item active\">\r\n                            <h4 className=\"nav-link\" >\r\n                                <Link to=\"/hitList\">\r\n                                   熱門歌單\r\n                                </Link>\r\n                                </h4>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <h4 className=\"nav-link\">\r\n                                \r\n                                <Link to=\"/themeList\">\r\n                                    主題歌單\r\n                                </Link>\r\n                                </h4>\r\n                            </li>\r\n                        </ul>\r\n                        {/* <form className=\"form-inline my-2 my-lg-0\">\r\n                        <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n                        </form> */}\r\n                    </div>\r\n                </nav>\r\n                    <Switch>\r\n                        {/* <Route path=\"/\" component={HomeMain} /> */}\r\n                        <Route path=\"/hitList\" component={()=><Home token= {this.state.token}/>}/>\r\n                        <Route path=\"/themeList\" component={()=><ThemeList token= {this.state.token}/>}/>\r\n                    </Switch>\r\n                {/* </Router> */}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Nav","import React from \"react\";\r\nimport Nav from './component/Nav'\r\nimport {Route} from 'react-router-dom'\r\nimport Home from './pages/Home'\r\nimport ThemeList from './pages/ThemeList'\r\n\r\nclass App extends React.Component {\r\n\r\n    render(){\r\n      return (\r\n        <>\r\n          <Nav />\r\n          {/* <Home/> */}\r\n          <Route exact path='/' component={Home}/>\r\n          {/* <Route path='/hitList' component={Home}/> */}\r\n          <Route path='/themeList' component={ThemeList}/>\r\n        </>\r\n      );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}